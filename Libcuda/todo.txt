todo list for the Libcuda library:

3) Implement robust error handling:
  * When calling nvcuda.dll APIs check that the ctx has been created
    so that we don't get "201 Invalid Context" but rather recreate the ctx
  * Provide a special exception (ala PtxCompilationException)
    that would provide details why the context was unable to be created
    one of the possible reasons would be DllNotFoundException
  * Catch CUDA exceptions and dispose of managed resources (especially in JittedKernel).
  * Test everything again so that we never leak managed object.
4) Trace literally everything (ala how it is done in Prjinit)
5) Provide capability to configure tracing within this library
6) Check how this stuff works for 64-bit (especially low-level allocations performed by cuModuleLoadDataExOptions)
10) Cache jitted ptx.
    This means that clients of that API must not dispose of JittedKernel manually
    However, if an exception gets thrown, the kernel must be disposed of, obviously
15) Segregate trace sources for Libcuda.